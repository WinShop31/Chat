import asyncio
import sqlite3
from datetime import datetime, timedelta
import os
import json

from pywebio import start_server
from pywebio.input import *
from pywebio.output import *
from pywebio.session import run_async, run_js

online_users = set()
DB_FILE = "chat_messages.db"
USERS_FILE = "users.json"
MAX_MESSAGES_COUNT = 100
MESSAGE_LIFETIME_DAYS = 2

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Ñ–∞–π–ª–æ–≤
def init_system():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã —Å–æ–æ–±—â–µ–Ω–∏–π
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS messages (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT,
            message TEXT,
            timestamp DATETIME
        )
    """)
    conn.commit()
    conn.close()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if not os.path.exists(USERS_FILE):
        with open(USERS_FILE, 'w') as f:
            json.dump({}, f)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª
def save_user(user_id, nickname):
    with open(USERS_FILE, 'r+') as f:
        users = json.load(f)
        users[user_id] = nickname
        f.seek(0)
        json.dump(users, f)
        f.truncate()

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ñ–∞–π–ª–∞
def load_user(user_id):
    if os.path.exists(USERS_FILE):
        with open(USERS_FILE, 'r') as f:
            users = json.load(f)
            return users.get(user_id, None)
    return None

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def save_message(username, message):
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("INSERT INTO messages (username, message, timestamp) VALUES (?, ?, ?)", 
                   (username, message, datetime.now()))
    conn.commit()
    conn.close()

# –£–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def delete_old_messages():
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cutoff = datetime.now() - timedelta(days=MESSAGE_LIFETIME_DAYS)
    cursor.execute("DELETE FROM messages WHERE timestamp < ?", (cutoff,))
    conn.commit()
    conn.close()

# –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def load_messages():
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("SELECT username, message FROM messages ORDER BY id")
    messages = cursor.fetchall()
    conn.close()
    return messages

async def login():
    session_id = run_js("localStorage.getItem('session_id');")
    if session_id is None:
        session_id = run_js("localStorage.setItem('session_id', Math.random().toString(36).substr(2));")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞—Ö–æ–¥–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–Ω–µ–µ
    nickname = load_user(session_id)
    if nickname:
        toast(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, {nickname}!")
        await main(nickname)
    else:
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        nickname = await input("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å", placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—Å–µ–≤–¥–æ–Ω–∏–º", required=True)
        save_user(session_id, nickname)
        toast("–ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
        await main(nickname)

async def main(nickname):
    global online_users

    put_markdown(f"## üßä –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ–Ω–ª–∞–π–Ω —á–∞—Ç, {nickname}!\n–°–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –Ω–∞ 2 –¥–Ω—è!")

    msg_box = output()
    put_scrollable(msg_box, height=300, keep_bottom=True)

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    delete_old_messages()
    saved_messages = load_messages()
    for user, message in saved_messages:
        msg_box.append(put_markdown(f"`{user}`: {message}"))

    online_users.add(nickname)
    save_message('üì¢', f'`{nickname}` –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É!')
    msg_box.append(put_markdown(f'üì¢ `{nickname}` –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É'))

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —á–∞—Ç–∞
    if nickname == "Systemadmin9282911923838":
        put_buttons(["–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç"], onclick=lambda btn: clear_chat())

    refresh_task = run_async(refresh_msg(nickname, msg_box))

    while True:
        data = await input_group("üí≠ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", [
            input(placeholder="–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è ...", name="msg"),
            actions(name="cmd", buttons=["–û—Ç–ø—Ä–∞–≤–∏—Ç—å", {'label': "–í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞", 'type': 'cancel'}])
        ], validate=lambda m: ('msg', "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è!") if m["cmd"] == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å" and not m['msg'] else None)

        if data is None:
            break

        save_message(nickname, data['msg'])
        msg_box.append(put_markdown(f"`{nickname}`: {data['msg']}"))

    refresh_task.close()

    online_users.remove(nickname)
    toast("–í—ã –≤—ã—à–ª–∏ –∏–∑ —á–∞—Ç–∞!")
    save_message('üì¢', f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{nickname}` –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç!')
    msg_box.append(put_markdown(f'üì¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{nickname}` –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç!'))

    put_buttons(['–ü–µ—Ä–µ–∑–∞–π—Ç–∏'], onclick=lambda btn: run_js('window.location.reload()'))

async def refresh_msg(nickname, msg_box):
    last_idx = len(load_messages())

    while True:
        await asyncio.sleep(1)

        delete_old_messages()
        new_messages = load_messages()[last_idx:]
        for user, message in new_messages:
            if user != nickname:
                msg_box.append(put_markdown(f"`{user}`: {message}"))
        last_idx = len(load_messages())

def clear_chat():
    # –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("DELETE FROM messages")
    conn.commit()
    conn.close()

    # –û—á–∏—Å—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —ç–∫—Ä–∞–Ω–µ
    run_js("document.querySelector('.pywebio-output').innerHTML = '';")
    toast("–ß–∞—Ç –æ—á–∏—â–µ–Ω!")

if __name__ == "__main__":
    init_system()
    start_server(login, debug=True, port=8080, cdn=False)
